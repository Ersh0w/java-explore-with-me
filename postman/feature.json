{
  "info": {
    "name": "Test Explore With Me - Feature Revision State And Comments Admin Test",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Event",
      "item": [
        {
          "name": "Admin Comment",
          "item": [
            {
              "name": "Добавление комментария от админа и изменение статуса события (вернуть на доработку).",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        const category = await api.addCategory(rnd.getCategory());\r",
                      "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                      "        let event2 = rnd.getEvent(category.id)\r",
                      "        event2.stateAction = \"SEND_TO_REVISION\"\r",
                      "        pm.collectionVariables.set('response', event2);\r",
                      "        pm.collectionVariables.set(\"eid\", event.id)\r",
                      "        pm.request.body.update({\r",
                      "            mode: 'raw',\r",
                      "            raw: event2,\r",
                      "            options: { raw: { language: 'json' } }\r",
                      "        });\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            // выполняем наш скрипт\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
                      "    pm.response.to.be.ok;    \r",
                      "    pm.response.to.be.withBody;\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      "\r",
                      "const source = pm.collectionVariables.get('response');\r",
                      "const target = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, publishedOn, location, requestModeration, adminComments\", function () {\r",
                      "pm.expect(target).to.have.property('id');\r",
                      "pm.expect(target).to.have.property('title');\r",
                      "pm.expect(target).to.have.property('annotation');\r",
                      "pm.expect(target).to.have.property('category');\r",
                      "pm.expect(target).to.have.property('paid');\r",
                      "pm.expect(target).to.have.property('eventDate');\r",
                      "pm.expect(target).to.have.property('initiator');\r",
                      "pm.expect(target).to.have.property('description');\r",
                      "pm.expect(target).to.have.property('participantLimit');\r",
                      "pm.expect(target).to.have.property('state');\r",
                      "pm.expect(target).to.have.property('createdOn');\r",
                      "pm.expect(target).to.have.property('publishedOn');\r",
                      "pm.expect(target).to.have.property('location');\r",
                      "pm.expect(target).to.have.property('requestModeration');\r",
                      "pm.expect(target).to.have.property('adminComments');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                      "    pm.expect(source.annotation).equal(target.annotation, 'Аннотация события должна соответствовать искомому событию');\r",
                      "    pm.expect(source.paid.toString()).equal(target.paid.toString(), 'Стоимость события должна соответствовать искомому событию');\r",
                      "    pm.expect(source.eventDate).equal(target.eventDate, 'Дата проведения события должна соответствовать искомому событию');\r",
                      "    pm.expect(source.description).equal(target.description, 'Описание события должно соответствовать искомому событию');\r",
                      "    pm.expect(source.title).equal(target.title, 'Название события должно соответствовать искомому событию');\r",
                      "    pm.expect(source.participantLimit.toString()).equal(target.participantLimit.toString(), 'Лимит участников события должен соответствовать искомому событию');\r",
                      "    pm.expect(source.adminComment).equal(target.adminComments[0].description, 'Комментарий админа должен соответствовать искомому событию');\r",
                      "    pm.expect(target.state).to.equal('REVISION', 'Состояние события должно быть: REVISION');\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{request_body}}"
                },
                "url": {
                  "raw": "{{baseUrl}}/admin/events/:eventId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "admin",
                    "events",
                    ":eventId"
                  ],
                  "variable": [
                    {
                      "key": "eventId",
                      "value": "{{eid}}",
                      "description": "(Required) id события"
                    }
                  ]
                },
                "description": "Обратите внимание:\n - дата начала события должна быть не ранее чем за час от даты публикации.\n- событие должно быть в состоянии ожидания публикации"
              },
              "response": []
            }
          ]
        },
        {
          "name": "State Revision",
          "item": [
            {
              "name": "Публикация админом события которое было отправлено на доработку",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        const category = await api.addCategory(rnd.getCategory());\r",
                      "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                      "        event = await api.sendToRevisionEvent(event.id);\r",
                      "        pm.collectionVariables.set(\"eid\", event.id)\r",
                      "        pm.request.body.update({\r",
                      "            mode: 'raw',\r",
                      "            raw: JSON.stringify({\r",
                      "                stateAction : \"PUBLISH_EVENT\"\r",
                      "            }),\r",
                      "            options: { raw: { language: 'json' } }\r",
                      "        });\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            // выполняем наш скрипт\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
                      "    pm.response.to.have.status(409);\r",
                      "    pm.response.to.be.withBody;\r",
                      "    pm.response.to.be.json;\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{request_body}}"
                },
                "url": {
                  "raw": "{{baseUrl}}/admin/events/:eventId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "admin",
                    "events",
                    ":eventId"
                  ],
                  "variable": [
                    {
                      "key": "eventId",
                      "value": "{{eid}}",
                      "description": "(Required) id события"
                    }
                  ]
                },
                "description": "Обратите внимание:\n - дата начала события должна быть не ранее чем за час от даты публикации.\n- событие должно быть в состоянии ожидания публикации"
              },
              "response": []
            },
            {
              "name": "Отмена админом события которое было отправлено на доработку",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        const category = await api.addCategory(rnd.getCategory());\r",
                      "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                      "        event = await api.sendToRevisionEvent(event.id);\r",
                      "        pm.collectionVariables.set(\"eid\", event.id)\r",
                      "        pm.request.body.update({\r",
                      "            mode: 'raw',\r",
                      "            raw: JSON.stringify({\r",
                      "                stateAction : \"REJECT_EVENT\"\r",
                      "            }),\r",
                      "            options: { raw: { language: 'json' } }\r",
                      "        });\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            // выполняем наш скрипт\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
                      "    pm.response.to.have.status(409);\r",
                      "    pm.response.to.be.withBody;\r",
                      "    pm.response.to.be.json;\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{request_body}}"
                },
                "url": {
                  "raw": "{{baseUrl}}/admin/events/:eventId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "admin",
                    "events",
                    ":eventId"
                  ],
                  "variable": [
                    {
                      "key": "eventId",
                      "value": "{{eid}}",
                      "description": "(Required) id события"
                    }
                  ]
                },
                "description": "Обратите внимание:\n - дата начала события должна быть не ранее чем за час от даты публикации.\n- событие должно быть в состоянии ожидания публикации"
              },
              "response": []
            },
            {
              "name": "Отмена события пользователем после возвращения его на доработку",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        const category = await api.addCategory(rnd.getCategory());\r",
                      "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                      "        event = await api.sendToRevisionEvent(event.id);\r",
                      "        pm.collectionVariables.set(\"uid\", user.id);\r",
                      "        pm.collectionVariables.set(\"eid\", event.id);\r",
                      "        pm.collectionVariables.set(\"response\", event);\r",
                      "        pm.request.body.update({\r",
                      "            mode: 'raw',\r",
                      "            raw: JSON.stringify({\r",
                      "                stateAction: \"CANCEL_REVIEW\"\r",
                      "            }),\r",
                      "            options: { raw: { language: 'json' } }\r",
                      "        });\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
                      "    pm.response.to.be.ok;    \r",
                      "    pm.response.to.be.withBody;\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      "\r",
                      "const source = pm.collectionVariables.get(\"response\");\r",
                      "const target = pm.response.json();\r",
                      "\r",
                      "\r",
                      "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
                      "pm.expect(target).to.have.property('id');\r",
                      "pm.expect(target).to.have.property('title');\r",
                      "pm.expect(target).to.have.property('annotation');\r",
                      "pm.expect(target).to.have.property('category');\r",
                      "pm.expect(target).to.have.property('paid');\r",
                      "pm.expect(target).to.have.property('eventDate');\r",
                      "pm.expect(target).to.have.property('initiator');\r",
                      "pm.expect(target).to.have.property('description');\r",
                      "pm.expect(target).to.have.property('participantLimit');\r",
                      "pm.expect(target).to.have.property('state');\r",
                      "pm.expect(target).to.have.property('createdOn');\r",
                      "pm.expect(target).to.have.property('location');\r",
                      "pm.expect(target).to.have.property('requestModeration');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                      "    pm.expect(source.annotation).equal(target.annotation, 'Аннотация отменённого события должна соответствовать аннотации события до отмены');\r",
                      "    pm.expect(source.category.id).equal(target.category.id, 'Категория отменённого события должна соответствовать категории события до отмены');\r",
                      "    pm.expect(source.paid.toString()).equal(target.paid.toString(), 'Стоимость отменённого события должна соответствовать стоимости события до отмены');\r",
                      "    pm.expect(source.eventDate).equal(target.eventDate, 'Дата проведения отменённого события должна соответствовать дате проведения события до отмены');\r",
                      "    pm.expect(source.description).equal(target.description, 'Описание отменённого события должно соответствовать описанию события до отмены');\r",
                      "    pm.expect(source.title).equal(target.title, 'Название отменённого события должно соответствовать названию события до отмены');\r",
                      "    pm.expect(source.participantLimit.toString()).equal(target.participantLimit.toString(), 'Лимит участников отменённого события должен соответствовать лимиту участников события до отмены');\r",
                      "    pm.expect(source.paid.toString()).equal(target.paid.toString(), 'Стоимость отменённого события должна соответствовать стоимости события до отмены');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Событие должно иметь статус PENDING или REVISION при создании и статус CANCELED после выполнения запроса\", function () {\r",
                      "    pm.expect(source.state).to.be.oneOf(['PENDING', 'REVISION']);\r",
                      "    pm.expect(target.state).equal(\"CANCELED\");\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{request_body}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/events/:eventId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "events",
                    ":eventId"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{uid}}",
                      "description": "(Required) id текущего пользователя"
                    },
                    {
                      "key": "eventId",
                      "value": "{{eid}}",
                      "description": "(Required) id отменяемого события"
                    }
                  ]
                },
                "description": "Обратите внимание: Отменить можно только событие в состоянии ожидания модерации."
              },
              "response": []
            },
            {
              "name": "Доработка события пользователем после возврата от админа",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        const category = await api.addCategory(rnd.getCategory());\r",
                      "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                      "        event = await api.sendToRevisionEvent(event.id);\r",
                      "        pm.collectionVariables.set(\"uid\", user.id);\r",
                      "        pm.collectionVariables.set(\"eid\", event.id);\r",
                      "        pm.collectionVariables.set(\"response\", event);\r",
                      "        pm.request.body.update({\r",
                      "            mode: 'raw',\r",
                      "            raw: JSON.stringify({\r",
                      "                stateAction: \"SEND_TO_REVIEW\"\r",
                      "            }),\r",
                      "            options: { raw: { language: 'json' } }\r",
                      "        });\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
                      "    pm.response.to.be.ok;    \r",
                      "    pm.response.to.be.withBody;\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      "\r",
                      "const source = pm.collectionVariables.get(\"response\");\r",
                      "const target = pm.response.json();\r",
                      "\r",
                      "\r",
                      "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
                      "pm.expect(target).to.have.property('id');\r",
                      "pm.expect(target).to.have.property('title');\r",
                      "pm.expect(target).to.have.property('annotation');\r",
                      "pm.expect(target).to.have.property('category');\r",
                      "pm.expect(target).to.have.property('paid');\r",
                      "pm.expect(target).to.have.property('eventDate');\r",
                      "pm.expect(target).to.have.property('initiator');\r",
                      "pm.expect(target).to.have.property('description');\r",
                      "pm.expect(target).to.have.property('participantLimit');\r",
                      "pm.expect(target).to.have.property('state');\r",
                      "pm.expect(target).to.have.property('createdOn');\r",
                      "pm.expect(target).to.have.property('location');\r",
                      "pm.expect(target).to.have.property('requestModeration');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                      "    pm.expect(source.annotation).equal(target.annotation, 'Аннотация доработонного события должна соответствовать аннотации события до доработки');\r",
                      "    pm.expect(source.category.id).equal(target.category.id, 'Категория доработонного события должна соответствовать категории события до доработки');\r",
                      "    pm.expect(source.paid.toString()).equal(target.paid.toString(), 'Стоимость доработонного события должна соответствовать стоимости события до доработки');\r",
                      "    pm.expect(source.eventDate).equal(target.eventDate, 'Дата проведения доработонного события должна соответствовать дате проведения события до доработки');\r",
                      "    pm.expect(source.description).equal(target.description, 'Описание доработонного события должно соответствовать описанию события до доработки');\r",
                      "    pm.expect(source.title).equal(target.title, 'Название доработонного события должно соответствовать названию события до доработки');\r",
                      "    pm.expect(source.participantLimit.toString()).equal(target.participantLimit.toString(), 'Лимит участников доработонного события должен соответствовать лимиту участников события до доработки');\r",
                      "    pm.expect(source.paid.toString()).equal(target.paid.toString(), 'Стоимость доработонного события должна соответствовать стоимости события до доработки');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Событие должно иметь статус PENDING при создании и статус PENDING после выполнения запроса\", function () {\r",
                      "    pm.expect(source.state).equal(\"REVISION\");\r",
                      "    pm.expect(target.state).equal(\"PENDING\");\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{request_body}}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/events/:eventId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "events",
                    ":eventId"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{uid}}",
                      "description": "(Required) id текущего пользователя"
                    },
                    {
                      "key": "eventId",
                      "value": "{{eid}}",
                      "description": "(Required) id доработонного события"
                    }
                  ]
                },
                "description": "Обратите внимание: Доработать можно только событие в состоянии отмены или состоянии возврата на доработку."
              },
              "response": []
            },
            {
              "name": "Получение информации о событии с комментарием админа после возврата на доработку",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "const main = async () => {\r",
                      "    const api = new API(pm);\r",
                      "    const rnd = new RandomUtils();\r",
                      "\r",
                      "    try {\r",
                      "        const user = await api.addUser(rnd.getUser());\r",
                      "        pm.collectionVariables.set(\"uid\", user.id)\r",
                      "        const category = await api.addCategory(rnd.getCategory());\r",
                      "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                      "        event = await api.sendToRevisionEvent(event.id, rnd.getAdminComment());\r",
                      "        pm.collectionVariables.set(\"eid\", event.id)\r",
                      "    } catch(err) {\r",
                      "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "const interval = setInterval(() => {}, 1000);\r",
                      "\r",
                      "setTimeout(async () => \r",
                      "    {\r",
                      "        try {\r",
                      "            await main();\r",
                      "        } catch (e) {\r",
                      "            console.error(e);\r",
                      "        } finally {\r",
                      "            clearInterval(interval);\r",
                      "        }\r",
                      "    },  \r",
                      "    100 \r",
                      ");"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
                      "    pm.response.to.be.ok;    \r",
                      "    pm.response.to.be.withBody;\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      "\r",
                      "const target = pm.response.json();\r",
                      "\r",
                      "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration, adminComments\", function () {\r",
                      "pm.expect(target).to.have.property('id');\r",
                      "pm.expect(target).to.have.property('title');\r",
                      "pm.expect(target).to.have.property('annotation');\r",
                      "pm.expect(target).to.have.property('category');\r",
                      "pm.expect(target).to.have.property('paid');\r",
                      "pm.expect(target).to.have.property('eventDate');\r",
                      "pm.expect(target).to.have.property('initiator');\r",
                      "pm.expect(target).to.have.property('description');\r",
                      "pm.expect(target).to.have.property('participantLimit');\r",
                      "pm.expect(target).to.have.property('state');\r",
                      "pm.expect(target).to.have.property('createdOn');\r",
                      "pm.expect(target).to.have.property('location');\r",
                      "pm.expect(target).to.have.property('requestModeration');\r",
                      "pm.expect(target).to.have.property('adminComments');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                      "    pm.expect(target.id).to.not.be.null;\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/users/:userId/events/:eventId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":userId",
                    "events",
                    ":eventId"
                  ],
                  "variable": [
                    {
                      "key": "userId",
                      "value": "{{uid}}",
                      "description": "(Required) id текущего пользователя"
                    },
                    {
                      "key": "eventId",
                      "value": "{{eid}}",
                      "description": "(Required) id события"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "API = class {",
          "    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
          "        this.baseUrl = baseUrl;",
          "        this.pm = postman;",
          "        this._verbose = verbose;",
          "    }",
          "",
          "    async addUser(user, verbose=null) {",
          "        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
          "    }",
          "",
          "    async addCategory(category, verbose=null) {",
          "        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
          "    }",
          "",
          "    async addEvent(userId, event, verbose=null) {",
          "        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
          "    }",
          "",
          "    async addCompilation(compilation, verbose=null) {",
          "        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
          "    }",
          "",
          "    async publishParticipationRequest(eventId, userId, verbose=null) {",
          "        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
          "    }",
          "",
          "    async publishEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
          "    }",
          "    ",
          "    async rejectEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
          "    }",
          "",
          "    async sendToRevisionEvent(eventId, commentAdmin, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"SEND_TO_REVISION\", adminComment: commentAdmin}, \"Ошибка при отмене события\", verbose);",
          "    }",
          "",
          "    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
          "        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
          "    }",
          "",
          "    async findCategory(catId, verbose=null) {",
          "        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
          "    }",
          "",
          "    async findCompilation(compId, verbose=null) {",
          "        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
          "    }",
          "",
          "    async findEvent(eventId, verbose=null) {",
          "        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
          "    }",
          "",
          "    async findUser(userId, verbose=null) {",
          "        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
          "    }",
          "",
          "    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
          "        return new Promise((resolve, reject) => {",
          "            verbose = verbose == null ? this._verbose : verbose;",
          "",
          "            const request = {",
          "                url: this.baseUrl + path,",
          "                method: method,",
          "                body: body == null ? \"\" : JSON.stringify(body),",
          "                header: { \"Content-Type\": \"application/json\" },",
          "            };",
          "",
          "            if(verbose) {",
          "                console.log(\"Отправляю запрос: \", request);",
          "            }",
          "",
          "            try {",
          "                this.pm.sendRequest(request, (error, response) => {",
          "                    if(error || (response.code >= 400 && response.code <= 599)) {",
          "                        let err = error ? error : JSON.stringify(response.json());",
          "                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
          "                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
          "                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
          "",
          "                        reject(new Error(errorText + err));",
          "                    }",
          "",
          "                    if(verbose) {",
          "                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
          "                    }",
          "",
          "                    resolve(response.json());",
          "                });",
          "            } catch(err) {",
          "                if(verbose) {",
          "                    console.error(errorText, err);",
          "                }",
          "                return Promise.reject(err);",
          "            }",
          "        });",
          "    }",
          "};",
          "",
          "RandomUtils = class {",
          "    constructor() {}",
          "",
          "    getUser() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomFullName}}'),",
          "            email: pm.variables.replaceIn('{{$randomEmail}}')",
          "        };",
          "    }",
          "",
          "    getCategory() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
          "        };",
          "    }",
          "",
          "    getAdminComment() {",
          "        return {",
          "            adminComment: '{{$randomLoremParagraph}}'",
          "        };",
          "    }",
          "",
          "    getEvent(categoryId) {",
          "        return {",
          "            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
          "            category: categoryId,",
          "            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
          "            eventDate: this.getFutureDateTime(),",
          "            location: {",
          "                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
          "                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
          "            },",
          "            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
          "            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
          "            adminComment: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
          "        }",
          "    }",
          "",
          "    getCompilation(...eventIds) {",
          "        return {",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
          "            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            events: eventIds",
          "        };",
          "    }",
          "",
          "",
          "    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
          "        let moment = require('moment');",
          "",
          "        let m = moment();",
          "        m.add(hourShift, 'hour');",
          "        m.add(minuteShift, 'minute');",
          "        m.add(yearShift, 'year');",
          "",
          "        return m.format('YYYY-MM-DD HH:mm:ss');",
          "    }",
          "",
          "    getWord(length = 1) {",
          "        let result = '';",
          "        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
          "        const charactersLength = characters.length;",
          "        let counter = 0;",
          "        while (counter < length) {",
          "            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
          "            counter += 1;",
          "        }",
          "        return result;",
          "    }",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "name",
      "value": ""
    },
    {
      "key": "usersCount",
      "value": 1,
      "type": "number"
    },
    {
      "key": "catid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "request_body",
      "value": ""
    },
    {
      "key": "mail",
      "value": ""
    },
    {
      "key": "response",
      "value": ""
    },
    {
      "key": "uid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "catname",
      "value": ""
    },
    {
      "key": "eid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "compid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "toCheck",
      "value": ""
    },
    {
      "key": "newDataToSet",
      "value": ""
    },
    {
      "key": "uid1",
      "value": ""
    },
    {
      "key": "reqid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "catId",
      "value": ""
    },
    {
      "key": "confirmedRequests",
      "value": ""
    },
    {
      "key": "responseArr",
      "value": ""
    },
    {
      "key": "source1",
      "value": ""
    },
    {
      "key": "source2",
      "value": ""
    },
    {
      "key": "fromId",
      "value": "0"
    },
    {
      "key": "source",
      "value": ""
    }
  ]
}